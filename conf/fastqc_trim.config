/*
 * -------------------------------------------------
 *  Nextflow config file for running mouse, mm10 geneome, paired end.
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run nf-core/rnaseq -profile mm10
 */

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {
  executor = 'lsf'

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }
  queue = "standard"
  clusterOptions = "-P MJ"

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }
  withName:get_software_versions {
    cache = false
  }
  withLabel:fastqc {
    cpus = 4
  }
  withLabel:trim_galore {
    cpus = 2
  }
  withLabel:low_memory {
    cpus = 2
  }
  withLabel:mid_memory {
    cpus = 4
  }
  withLabel:star_index {
    cpus = 24
    clusterOptions = '-P MJ -R "rusage[mem=4000]"'
    queue = 'large_mem'
  }
  withLabel:hisat2_index {
    cpus = 24
    clusterOptions = '-P MJ -R "rusage[mem=4000]"'
  }
  withLabel:salmon_index {
    cpus = 4
  }
  withLabel:sortmerna_index {
    cpus = 2
  }
  withLabel:sortmerna {
    cpus = 2
  }
  withLabel:star_align {
    cpus = 16
  }
  withLabel:hisat2_align {
    cpus = 16
  }
  withLabel:rseqc {
    cpus = 8
  }
  withLabel:preseq {
    cpus = 2
  }
  withLabel:picard_markDuplicates {
    cpus = 4
  }
  withLabel:qualimap {
    cpus = 4
  }
  withLabel:dupradar {
    cpus = 4
  }
  withLabel:featureCounts {
    cpus = 4
  }
  withLabel:merge_featureCounts {
    cpus = 8
  }
  withLabel:stringtie_fpkm {
    cpus = 4
  }  
  withLabel:sample_correlation {
    cpus = 4
  }
  withLabel:salmon {
    cpus = 4
    queue = 'priority'
  }
  withLabel:quick_low_memory {
    cpus = 2
    queue = 'short'
  }
}

params {
  config_profile_name = 'Fastqc and trim using SJ LSF executor'
  config_profile_description = 'Fastqc and trim using SJ LSF executor'

  // Limit resources so that this can run CI
  // max_cpus = 2
  // max_memory = 6.GB
  // max_time = 48.h
  
  // Main arguments
  // -profile
  // --reads
  single_end = false

  // saveTrimmed
  save_trimmed = true

  // Adapter trimming

  // Job resources
  email = 'mark.chen@stjude.org'

  // Other command line parameters
}
