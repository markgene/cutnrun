/*
Config for histone modifications.
 */

 // Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {
  executor = 'lsf'

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }
  queue = "standard"
  clusterOptions = "-P MJ"

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }
  withName:get_software_versions {
    cache = false
  }
}

params {
  config_profile_name = 'histone'
  config_profile_description = "Run histone modifications"
  cab_ref_base = '/research/rgs01/applications/hpcf/authorized_apps/cab/Automation/REF'

  max_cpus = 4
  max_memory = 6.GB
  max_time = 12.h

  // IO
  input = "/home/jchen4/projects/ao/chipseq/validity/design_histone.csv"
  outdir = "/home/jchen4/projects/ao/chipseq/validity/results_histone"

  // Genome references
  //genome = 'GRCm38'
  //save_reference = true
  fasta     = "${cab_ref_base}/Mus_musculus/Gencode/M22/GRCm38.primary_assembly.genome.fa"
  gtf       = "${cab_ref_base}/Mus_musculus/Gencode/M22/gencode.vM22.primary_assembly.annotation.gtf"
  bwa_index = "${cab_ref_base}/Mus_musculus/Gencode/M22/bwa-index/0.7.17-r1188/GRCm38.primary_assembly.genome.fa"
  blacklist = "${baseDir}/assets/blacklists/GRCm38-blacklist-cab.bed"

  // Peaks
  macs_gsize  = "1.87e9"

  // For speed to avoid CI time-out
  //fingerprint_bins = 100
}